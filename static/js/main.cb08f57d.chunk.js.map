{"version":3,"sources":["assets/logo-image.png","assets/Hi.gif","app/AppStyles.js","tiles/TileStyles.js","ThemeContext.js","utils/getRandomSize.js","utils/getRandomColors.js","utils/getColorHue.js","tiles/Tiles.js","app/App.js","utils/getTileSizes.js","reportWebVitals.js","index.js"],"names":["module","exports","__webpack_require__","p","Portfolio","styled","_ref","textAlign","padding","minHeight","transition","backgroundColor","isDarkMode","Header","display","justifyContent","alignItems","Content","flexWrap","alignContent","gap","opacity","TitleContainer","LogoContainer","objectFit","height","width","borderRadius","Title","_ref2","marginLeft","fontSize","fontWeight","cursor","fontFamily","background","WebkitBackgroundClip","WebkitTextFillColor","color","ThemeIconContainer","Tile","position","flexDirection","perspective","transformStyle","maxWidth","boxShadow","animation","isAnimating","@keyframes rotation","0%","transform","100%","&:hover","textShadow","border","&:hover div","TileName","whiteSpace","overflow","textOverflow","overflowWrap","TileContent","_ref3","WebkitLineClamp","WebkitBoxOrient","FlippedTile","_ref4","IconContainer","_ref5","ThemeContext","createContext","getRandomSize","Math","floor","random","getRandomColors","previousColor","newHue","ctx","document","createElement","getContext","fillStyle","fillRect","_data$slice","getImageData","data","slice","_data$slice2","_slicedToArray","r","g","b","max","min","hue","delta","getColorHue","getRandomInt","newSaturation","newLightness","concat","getOriginalColor","i","Tiles","tileName","content","isSquare","shuffleColors","flipped","_useState","useState","_useState2","isFlipped","setIsFlipped","_useState3","_useState4","setIsAnimating","_useState5","_useState6","tileSize","setTileSize","handleLinkClick","setTimeout","window","open","url","useContext","tileStyle","--tile-color","--text-color","React","style","onClick","type","src","iconSrc","alt","iconAlt","App","setIsDarkMode","areTilesVisible","setAreTilesVisible","tileColors","setTileColors","_useState7","_useState8","tileSizes","setTileSizes","useEffect","sizes","tiles","forEach","tile","index","size","getTileSizes","shuffledColors","map","_toConsumableArray","Provider","value","LogoImage","HiGif","current","Moon","Sun","key","reportWebVitals","onPerfEntry","Function","e","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.cb08f57d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-image.842e320f.png\";","module.exports = __webpack_public_path__ + \"static/media/Hi.26df447c.gif\";","import { styled } from \"@mui/material\";\n\nexport const Portfolio = styled(\"div\")(({ isDarkMode }) => ({\n  textAlign: \"center\",\n  padding: \"20px\",\n  minHeight: \"100vh\",\n  transition: \"all 2s\",\n  backgroundColor: isDarkMode===\"dark\" ? \"black\" : \"white\",\n}));\n\nexport const Header = styled(\"div\")(() => ({\n  display: \"flex\",\n  justifyContent: \"space-between\",\n  alignItems: \"center\",\n  padding: \"20px\",\n}));\n\nexport const Content = styled(\"div\")(() => ({\n  display: \"flex\",\n  flexWrap: \"wrap\",\n  justifyContent: \"space-between\",\n  alignContent: \"space-between\",\n  alignItems: \"center\",\n  gap: \"10px\",\n  opacity: 1,\n  transition: \"opacity 0.5s\",\n  padding: \"20px\",\n}));\n\nexport const TitleContainer = styled(\"div\")(() => ({\n  display: \"flex\",\n  alignItems: \"center\",\n}));\n\nexport const LogoContainer = styled(\"img\")(() => ({\n  display: \"block\",\n  objectFit: \"contain\",\n  height: \"40px\",\n  width: \"40px\",\n  borderRadius: \"5px\",\n}));\n\nexport const Title = styled(\"span\")(({isDarkMode}) => ({\n  marginLeft: \"20px\",\n  fontSize: \"30px\",\n  fontWeight: \"bold\",\n  cursor: \"pointer\",\n  transition: \"background-position 2s\",\n  fontFamily: \"Bagel Fat One\",\n  background: isDarkMode===\"dark\"? \"linear-gradient(to right, #ff00cc, #3333ff)\" : \"\",\n  WebkitBackgroundClip: isDarkMode === \"dark\" ? \"text\" : \"\",\n  WebkitTextFillColor: isDarkMode === \"dark\" ? \"transparent\" : \"black\",\n  color: isDarkMode===\"dark\"? \"transparent\": \"black\",\n}));\n\nexport const ThemeIconContainer = styled(\"span\")(() => ({\n  display: \"block\",\n  objectFit: \"contain\",\n  height: \"30px\",\n  width: \"30px\",\n  cursor: \"pointer\",\n  transition: \"all 2s\",\n}));\n","import { styled } from \"@mui/material\";\n\nexport const Tile = styled(\"div\")(({ isDarkMode, isAnimating }) => ({\n  position: \"relative\",\n  display: \"flex\",\n  flexDirection: \"column\",\n  justifyContent: \"center\",\n  alignItems: \"center\",\n  backgroundColor: \"var(--tile-color)\",\n  width: \"var(--tile-width)\",\n  height: \"var(--tile-height)\",\n  cursor: \"pointer\",\n  perspective: \"1000px\",\n  transformStyle: \"preserve-3d\",\n  textAlign: \"center\",\n  maxWidth: \"30vw\",\n  borderRadius: \"5PX\",\n  boxShadow: isDarkMode===\"dark\" ? \"5px 5px 5px #808080\" : \"5px 5px 5px #111111\",\n  animation: isAnimating ? \"rotation 0.4s forwards\" : \"none\",\n  transition:\n    \"background-color 0.2s ease, box-shadow 0.2s ease, width 0.2s ease 0.2s, height 0.2s ease 0.2s\",\n  padding: \"2px\",\n        \n  \"@keyframes rotation\": {\n    \"0%\": {\n      transform: \"rotateY(0deg)\",\n    },\n    \"100%\": {\n      transform: \"rotateY(360deg)\",\n    },\n  },\n  \"&:hover\": {\n    padding:\"0px\",\n    textShadow: \"-1px -1px 0 var(--tile-color), 1px -1px 0 var(--tile-color), -1px 1px 0 var(--tile-color), 1px 1px 0 var(--tile-color)\",\n    backgroundColor: isDarkMode===\"dark\" ? \"black\": \"white\",\n    border: \"2px solid var(--tile-color)\",\n  },\n  \"&:hover div\": {\n    textShadow: \"-1px -1px 0 var(--tile-color), 1px -1px 0 var(--tile-color), -1px 1px 0 var(--tile-color), 1px 1px 0 var(--tile-color)\",\n    color: isDarkMode===\"dark\" ? \"black\":\"white\",\n    \n    transition: \"color 0.2s\"\n  }, \n}));\n\nexport const TileName = styled(\"div\")(({isDarkMode}) => ({\n  fontSize: \"24px\",\n  color: isDarkMode===\"light\"? \"black\":\"white\",\n  fontWeight: \"bold\",\n  whiteSpace: \"normal\" /* Allow multiline text */,\n  overflow: \"hidden\" /* Hide overflowing content */,\n  textOverflow: \"ellipsis\" /* Add ellipsis for very long content */,\n  overflowWrap: \"anywhere\",\n  transition: \"color 1s\",\n \n}));\n\nexport const TileContent = styled(\"div\")(({isDarkMode}) => ({\n  fontWeight: \"lighter\",\n  fontSize: \"18px\",\n  color: isDarkMode===\"light\"? \"black\":\"white\",\n  whiteSpace: \"normal\" /* Allow multiline text */,\n  overflow: \"hidden\" /* Hide overflowing content */,\n  textOverflow: \"ellipsis\" /* Add ellipsis for very long content */,\n  WebkitLineClamp: 4 /* Number of lines to show */,\n  WebkitBoxOrient: \"vertical\",\n  transition: \"color 1s\",\n}));\n\nexport const FlippedTile = styled(\"img\")(({ isAnimating }) => ({\n  height: \"100%\",\n  width: \"100%\",\n  \n  borderRadius:\"20px\",\n}));\n\nexport const IconContainer = styled(\"div\")(({ isAnimating }) => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  width: \"100%\",\n  height: \"100%\",\n  animation: isAnimating ? \"rotation 0.4s forwards\" : \"none\",\n  transition:\n    \"background-color 0.2s ease, box-shadow 0.2s ease, width 0.2s ease 0.2s, height 0.2s ease 0.2s\",\n  \"@keyframes rotation\": {\n    \"0%\": {\n      transform: \"rotateY(0deg)\",\n    },\n    \"100%\": {\n      transform: \"rotateY(360deg)\",\n    },\n  },\n}));\n","import { createContext } from \"react\";\n\nexport const ThemeContext = createContext();\n","export const getRandomSize = () => {\n  const minSize = 50;\n  const maxSize = 200;\n  const num = Math.floor(Math.random() * (maxSize - minSize + 1) + minSize);\n  return num;\n};\n","import { getColorHue } from \"./getColorHue.js\";\n\nexport const getRandomColors = () => {\n  let color = \"\";\n  let previousColor = null;\n  let lowestSaturation = 50;\n  let highestSaturation = 100;\n  let lowestLightness = 30;\n  let highestLightness = 60;\n\n  if (previousColor) {\n    const prevHue = getColorHue(previousColor);\n    const newHue = (prevHue + getRandomInt(10, 40)) % 360;\n    const newSaturation =\n      Math.floor(Math.random() * (highestSaturation - lowestSaturation + 1)) +\n      lowestSaturation;\n    const newLightness =\n      Math.floor(Math.random() * (highestLightness - lowestLightness + 1)) +\n      lowestLightness;\n    color = `hsl(${newHue}, ${newSaturation}%, ${newLightness}%)`;\n  } else {\n    color = getOriginalColor();\n  }\n  previousColor = color;\n\n  return color;\n};\n\nconst getRandomInt = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst getOriginalColor = () => {\n  const letters = \"0123456789ABCDEF\";\n  let color = \"#\";\n\n  for (let i = 0; i < 6; i++) {\n    color += letters[Math.floor(Math.random() * 16)];\n  }\n\n  return color;\n};\n","export const getColorHue = (color) => {\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n  ctx.fillStyle = color;\n  ctx.fillRect(0, 0, 1, 1);\n  const data = ctx.getImageData(0, 0, 1, 1).data;\n  const [r, g, b] = data.slice(0, 3);\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  let hue = 0;\n  if (max === min) {\n    hue = 0;\n  } else {\n    const delta = max - min;\n    switch (max) {\n      case r:\n        hue = ((g - b) / delta) % 6;\n        break;\n      case g:\n        hue = (b - r) / delta + 2;\n        break;\n      case b:\n        hue = (r - g) / delta + 4;\n        break;\n      default:\n        hue = 0; // Handle unmatched cases\n        break;\n    }\n    hue *= 60;\n    if (hue < 0) {\n      hue += 360;\n    }\n  }\n  return hue;\n};\n","import React, { useContext, useState } from \"react\";\nimport {\n  TileName,\n  IconContainer,\n  FlippedTile,\n  TileContent,\n  Tile,\n} from \"./TileStyles\";\nimport { ThemeContext } from \"../ThemeContext\";\nimport { getRandomSize } from \"../utils\";\n\nexport const Tiles = ({\n  tileName,\n  content,\n  isSquare,\n  color,\n  shuffleColors,\n  flipped,\n}) => {\n \n  const [isFlipped, setIsFlipped] = useState(flipped);\n  const [isAnimating, setIsAnimating] = useState(false);\n  const [tileSize, setTileSize] = useState(`${getRandomSize()}px`);\n  \n  const handleClick = () => {\n    setTileSize(`${getRandomSize()}px`);\n    setIsAnimating(true);\n\n    setTimeout(() => {\n      setIsAnimating(false);\n      if (tileName === \"Color Shuffle\") {\n        shuffleColors();\n      }\n    }, 300);\n\n    if(tileName !== \"Color Shuffle\")\n      setIsFlipped(!isFlipped);\n  };\n\n  const handleLinkClick = () => {\n    setTimeout(() => {\n      window.open(content.url, \"_blank\");\n    }, 500);\n  };\n\n  const renderContent = () => {\n    if (content.type === \"iconLink\") {\n      return (\n        <IconContainer isAnimating={isAnimating} onClick={handleLinkClick}>\n          {!isFlipped ? (\n            <FlippedTile src={content.iconSrc} alt={content.iconAlt} />\n          ) : (\n            <Tile />\n          )}\n        </IconContainer>\n      );\n    } else {\n      return <TileContent isDarkMode={isDarkMode}>{content}</TileContent>;\n    }\n  };\n  \n  const {isDarkMode} = useContext(ThemeContext);\n\n  const tileStyle = {\n    \"--tile-color\": color,\n    \"--text-color\": isDarkMode===\"dark\" ? \"white\" : \"black\",\n  };\n  if (isSquare) {\n    tileStyle[\"--tile-width\"] = tileSize;\n    tileStyle[\"--tile-height\"] = tileSize;\n  } else {\n    tileStyle[\"--tile-width\"] = \"400px\";\n    tileStyle[\"--tile-height\"] = tileSize;\n  }\n\n  return (\n    <Tile\n      style={tileStyle}\n      isAnimating={isAnimating}\n      tileSize={tileSize}\n      onClick={handleClick}\n      isDarkMode={isDarkMode}\n    >\n      <TileName isDarkMode={isDarkMode}>{isFlipped ? tileName : renderContent()}</TileName>\n    </Tile>\n  );\n};\n","import React, { useState, useEffect } from \"react\";\nimport { Sun, Moon } from \"react-feather\";\nimport {\n  Portfolio,\n  Header,\n  Content,\n  TitleContainer,\n  LogoContainer,\n  ThemeIconContainer,\n  Title,\n} from \"./AppStyles\";\nimport { LogoImage, HiGif } from \"../assets\";\nimport data from \"../data.json\";\nimport { Tiles } from \"../tiles\";\nimport { ThemeContext } from \"../ThemeContext\";\nimport { getTileSizes, getRandomColors } from \"../utils\";\n\nexport const App = () => {\n  const [isDarkMode, setIsDarkMode] = useState(\"light\");\n  const [areTilesVisible, setAreTilesVisible] = useState(true);\n  const [tileColors, setTileColors] = useState([]);\n  const [tileSizes, setTileSizes] = useState({});\n\n  const toggleTheme = () => {\n    setIsDarkMode((current) => (current === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  useEffect(() => {\n    setTileSizes(getTileSizes());\n  }, [areTilesVisible]);\n\n  const handleTitleClick = () => {\n    setAreTilesVisible(!areTilesVisible); // Toggle the visibility of tiles\n  };\n\n  const shuffleColors = () => {\n    let shuffledColors;\n    shuffledColors = data.tiles.map(() => getRandomColors());\n    setTileColors([...shuffledColors]);\n  };\n\n  return (\n    <ThemeContext.Provider value={{isDarkMode}}>\n      <Portfolio isDarkMode={isDarkMode}>\n        <Header>\n          <TitleContainer>\n            <LogoContainer src={LogoImage} alt=\"Logo image\" />\n            <Title isDarkMode={isDarkMode} onClick={handleTitleClick}>Aswin Shailajan <img src={HiGif} alt=\"Hai..!\" width=\"30px\" /></Title>\n          </TitleContainer>\n          <ThemeIconContainer onClick={toggleTheme}>\n            {isDarkMode===\"dark\" ? <Moon color=\"#D3D3D3\" size={30}/> : <Sun color=\"#E8A317\" size={30}/>}\n          </ThemeIconContainer>\n        </Header>\n        <Content>\n          {areTilesVisible &&\n            data.tiles.map((tile, index) => (\n              <Tiles\n                key={index}\n                tileName={tile.tileName}\n                content={tile.content}\n                isSquare={tile.isSquare}\n                color={tileColors[index] || tile.color} // Use the shuffled color if available\n                shuffleColors={shuffleColors} // Pass the shuffleColors function\n                tileSize={tileSizes[index]}\n                flipped={tile.flipped}\n              />\n            ))}\n        </Content>\n      </Portfolio>\n    </ThemeContext.Provider>\n  );\n};\n","import data from \"../data.json\";\n\nexport const getTileSizes = () => {\n  const minSize = 50;\n  const maxSize = 200;\n  const sizes = {};\n  data.tiles.forEach((tile, index) => {\n    const size = Math.floor(Math.random() * (maxSize - minSize + 1) + minSize);\n    sizes[index] = `${size}px`;\n  });\n  return sizes;\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport { App } from \"./app\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}